@startuml
'https://plantuml.com/sequence-diagram


-> UserUniversityListManager : createList(input)
activate UserUniversityListManager

UserUniversityListManager -> UserUniversityListManager : containsKey((input)
activate UserUniversityListManager
return : boolean

alt school already exists

else new school list
    UserUniversityListManager -> UserUniversityList : UserUniversityList(input)
    activate UserUniversityList
    return newList : UserUniversityList
    UserUniversityListManager -> UserUniversityListManager : put(input, newList)
    activate UserUniversityListManager

    UserUniversityListManager -> Ui : printPuListCreatedAcknowledgement(input)
    activate Ui
    return

    return

end
return
deactivate UserUniversityListManager

-> UserUniversityListManager : deleteList(input)
activate UserUniversityListManager

UserUniversityListManager -> UserUniversityListManager : containsKey((input)
activate UserUniversityListManager
return : boolean

alt inputSchool exists
    UserUniversityListManager -> UserUniversityListManager : remove(inputSchool)
    activate UserUniversityListManager

    UserUniversityListManager -> Ui : printPuListDeletedAcknowledgement(inputSchool)
    return
else inputSchool does not exist
end

return
deactivate UserUniversityListManager

-> UserUniversityListManager : addModule(inputSchool, inputModule)
activate UserUniversityListManager
UserUniversityListManager -> UserUniversityListManager : containsKey(inputSchool)
activate UserUniversityListManager
return : boolean

alt inputSchool exists
    UserUniversityListManager -> UserUniversityListManager : getUserUniversityList(inputSchool)
    activate UserUniversityListManager
    return : UserUniversityList
    UserUniversityListManager -> UserUniversityList : addModule(inputModule)
    activate UserUniversityList

    UserUniversityList -> UserModuleMappingList : addModule(input)
    activate UserModuleMappingList
    UserModuleMappingList -> UserModuleMappingList : findModuleByCode(input)
    activate UserModuleMappingList
    return : boolean
    alt module already exists
    else new module
        UserModuleMappingList -> UserModuleMappingList : add(input)
        activate UserModuleMappingList

        UserModuleMappingList -> Ui : printModuleAddedAcknowledgement(input)
        activate Ui
        UserModuleMappingList <-- Ui
        deactivate Ui
        return
    end
    UserUniversityList <-- UserModuleMappingList
    deactivate UserModuleMappingList
    UserUniversityListManager <-- UserUniversityList
    deactivate UserUniversityList

else inputSchool does not exist

end
return
deactivate UserUniversityListManager

-> UserUniversityListManager : deleteModule(inputSchool, puCode)
activate UserUniversityListManager
UserUniversityListManager -> UserUniversityListManager : containsKey(inputSchool)
activate UserUniversityListManager
return : boolean
alt inputSchool exists
    UserUniversityListManager -> UserUniversityListManager : getUserUniversityList(inputSchool)
    activate UserUniversityListManager
    return : UserUniversityList

    UserUniversityListManager -> UserUniversityList : getMyModules()
    activate UserUniversityList


    UserUniversityList -> UserModuleMappingList : getModuleByPuCode(puCode)
    activate UserModuleMappingList
    return : UserModuleMapping

    return deletedModule : UserModuleMapping

    UserUniversityListManager -> UserDeletedModules : addToDeletedModule(deletedModule)
    activate UserDeletedModules
    UserDeletedModules -> UserDeletedModules : size()
    activate UserDeletedModules
    return : int
        alt size == 5
        UserDeletedModules -> UserDeletedModules : removeLast()
        activate UserDeletedModules
        return
        else size < 5
        UserDeletedModules -> UserDeletedModules : addFirst(deletedModule)
        activate UserDeletedModules
        return
    end
    return

    UserUniversityListManager -> UserUniversityListManager : getUserUniversityList(inputSchool)
    activate UserUniversityListManager
    return : UserUniversityList

        UserUniversityListManager -> UserUniversityList : deleteModuleByPuCode(puCode)
        activate UserUniversityList

        UserUniversityList -> UserModuleMappingList : deleteModuleByPuCode(puCode)
        activate UserModuleMappingList
        loop for every module
        UserModuleMappingList -> UserModuleMappingList : get(index)
        activate UserModuleMappingList
        return UserModuleMapping
        UserModuleMappingList -> UserModuleMapping : getPuCode()
        activate UserModuleMapping
        return puCode : String
        UserModuleMappingList -> UserModuleMappingList : equals(puCode)
        activate UserModuleMappingList
        return : boolean
        opt module code matches
        UserModuleMappingList -> UserModuleMappingList : deleteModule(index)
        activate UserModuleMappingList
        return
        end

    end

    return

    return


else inputSchool does not exist
end
return
deactivate UserUniversityListManager

@enduml